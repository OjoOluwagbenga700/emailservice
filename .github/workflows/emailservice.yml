name: emailservice Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION }}
  SERVICE_NAME: ${{ vars.SERVICE_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  APP_ID: ${{ secrets.APP_ID }}
  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
  HELM_REPO: ${{ vars.HELM_REPO }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: |
          if python -m pytest --version >/dev/null 2>&1; then
            python -m pytest
          else
            echo "No tests configured or pytest not installed"
            echo "Skipping test execution for now"
          fi
        continue-on-error: true

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies and safety
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety
      
      - name: Run security scan
        run: |
          safety scan --output json > safety-report.json || echo "Security vulnerabilities found but continuing..."
        continue-on-error: true
      
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json
          retention-days: 7
        if: always()

  sonar:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=OjoOluwagbenga700_emailservice
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.sources=.
            -Dsonar.exclusions=.venv/**,__pycache__/**

  package:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        id: build
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker buildx build \
            --cache-to type=inline \
            --cache-from type=registry,ref=${{ env.ECR_REPOSITORY }}:latest \
            -t ${{ env.ECR_REPOSITORY }}:$IMAGE_TAG \
            -t ${{ env.ECR_REPOSITORY }}:latest \
            --push .

  update-helm-values:
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Generate GitHub App Token
      id: generate_token
      uses: tibdex/github-app-token@v2
      with:
        app_id: ${{ env.APP_ID }}
        private_key: ${{ env.PRIVATE_KEY }}
    - name: Checkout helm repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.HELM_REPO }}
        token: ${{ steps.generate_token.outputs.token }}
        ref: feature/boutique-helm
    - name: Install yq
      run: |
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Update Helm values
      run: |
        cd microservices-chart
        yq eval ".services.${{ env.SERVICE_NAME }}.image.repository = \"${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}\"" -i values.yaml
        yq eval ".services.${{ env.SERVICE_NAME }}.image.tag = \"${{ github.sha }}\"" -i values.yaml
    - name: Commit and push changes
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Actions"
        git add microservices-chart/values.yaml
        git commit -m "Update ${{ env.SERVICE_NAME }} image to ${{ github.sha }}"
        git push origin feature/boutique-helm

  trigger-deploy:
    runs-on: ubuntu-latest
    needs: update-helm-values
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Generate GitHub App Token
      id: generate_token
      uses: tibdex/github-app-token@v2
      with:
        app_id: ${{ env.APP_ID }}
        private_key: ${{ env.PRIVATE_KEY }}
    - name: Trigger deployment pipeline
      uses: actions/github-script@v7
      with:
        github-token: ${{ steps.generate_token.outputs.token }}
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: 'OjoOluwagbenga700',
            repo: 'helm-repo',
            workflow_id: 'helm-deploy.yml',
            ref: 'feature/boutique-helm'
          });